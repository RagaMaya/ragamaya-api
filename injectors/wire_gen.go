// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injectors

import (
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"github.com/midtrans/midtrans-go/coreapi"
	"gorm.io/gorm"
	controllers11 "ragamaya-api/api/analytics/controllers"
	repositories11 "ragamaya-api/api/analytics/repositories"
	services11 "ragamaya-api/api/analytics/services"
	controllers8 "ragamaya-api/api/articles/controllers"
	repositories8 "ragamaya-api/api/articles/repositories"
	services8 "ragamaya-api/api/articles/services"
	controllers5 "ragamaya-api/api/orders/controllers"
	repositories6 "ragamaya-api/api/orders/repositories"
	services5 "ragamaya-api/api/orders/services"
	controllers6 "ragamaya-api/api/payments/controllers"
	repositories7 "ragamaya-api/api/payments/repositories"
	services6 "ragamaya-api/api/payments/services"
	controllers10 "ragamaya-api/api/predicts/controllers"
	repositories10 "ragamaya-api/api/predicts/repositories"
	services10 "ragamaya-api/api/predicts/services"
	controllers4 "ragamaya-api/api/products/controllers"
	repositories5 "ragamaya-api/api/products/repositories"
	services4 "ragamaya-api/api/products/services"
	controllers9 "ragamaya-api/api/quizzes/controllers"
	repositories9 "ragamaya-api/api/quizzes/repositories"
	services9 "ragamaya-api/api/quizzes/services"
	controllers3 "ragamaya-api/api/sellers/controllers"
	repositories4 "ragamaya-api/api/sellers/repositories"
	services3 "ragamaya-api/api/sellers/services"
	controllers2 "ragamaya-api/api/storages/controllers"
	repositories3 "ragamaya-api/api/storages/repositories"
	services2 "ragamaya-api/api/storages/services"
	"ragamaya-api/api/users/controllers"
	"ragamaya-api/api/users/repositories"
	"ragamaya-api/api/users/services"
	controllers7 "ragamaya-api/api/wallets/controllers"
	repositories2 "ragamaya-api/api/wallets/repositories"
	services7 "ragamaya-api/api/wallets/services"
)

// Injectors from injector.go:

func InitializeUserController(db *gorm.DB, validate *validator.Validate) controllers.CompControllers {
	compRepositories := repositories.NewComponentRepository()
	repositoriesCompRepositories := repositories2.NewComponentRepository()
	compServices := services.NewComponentServices(compRepositories, db, validate, repositoriesCompRepositories)
	compControllers := controllers.NewCompController(compServices)
	return compControllers
}

func InitializeStorageController(db *gorm.DB, s3client *s3.Client, validate *validator.Validate) controllers2.CompControllers {
	compRepositories := repositories3.NewComponentRepository()
	compServices := services2.NewComponentServices(compRepositories, db, s3client, validate)
	compControllers := controllers2.NewCompController(compServices)
	return compControllers
}

func InitializeSellerController(db *gorm.DB, validate *validator.Validate) controllers3.CompControllers {
	compRepositories := repositories4.NewComponentRepository()
	repositoriesCompRepositories := repositories.NewComponentRepository()
	compServices := services3.NewComponentServices(compRepositories, db, validate, repositoriesCompRepositories)
	compControllers := controllers3.NewCompController(compServices)
	return compControllers
}

func InitializeProductController(db *gorm.DB, validate *validator.Validate) controllers4.CompControllers {
	compRepositories := repositories5.NewComponentRepository()
	compServices := services4.NewComponentServices(compRepositories, db, validate)
	compControllers := controllers4.NewCompController(compServices)
	return compControllers
}

func InitializeOrderController(db *gorm.DB, validate *validator.Validate, midtransCore *coreapi.Client) controllers5.CompControllers {
	compRepositories := repositories6.NewComponentRepository()
	repositoriesCompRepositories := repositories7.NewComponentRepository()
	compRepositories2 := repositories5.NewComponentRepository()
	compServices := services5.NewComponentServices(compRepositories, db, validate, midtransCore, repositoriesCompRepositories, compRepositories2)
	compControllers := controllers5.NewCompController(compServices)
	return compControllers
}

func InitializePaymentController(db *gorm.DB, validate *validator.Validate) controllers6.CompControllers {
	compRepositories := repositories7.NewComponentRepository()
	compServices := services6.NewComponentServices(compRepositories, db, validate)
	compControllers := controllers6.NewCompController(compServices)
	return compControllers
}

func InitializeWalletController(db *gorm.DB, validate *validator.Validate) controllers7.CompControllers {
	compRepositories := repositories2.NewComponentRepository()
	compServices := services7.NewComponentServices(compRepositories, db, validate)
	compControllers := controllers7.NewCompController(compServices)
	return compControllers
}

func InitializeArticleController(db *gorm.DB, validate *validator.Validate) controllers8.CompControllers {
	compRepositories := repositories8.NewComponentRepository()
	compServices := services8.NewComponentServices(compRepositories, db, validate)
	compControllers := controllers8.NewCompController(compServices)
	return compControllers
}

func InitializeQuizController(db *gorm.DB, s3client *s3.Client, validate *validator.Validate) controllers9.CompControllers {
	compRepositories := repositories9.NewComponentRepository()
	repositoriesCompRepositories := repositories3.NewComponentRepository()
	compServices := services2.NewComponentServices(repositoriesCompRepositories, db, s3client, validate)
	servicesCompServices := services9.NewComponentServices(compRepositories, db, validate, compServices)
	compControllers := controllers9.NewCompController(servicesCompServices)
	return compControllers
}

func InitializePredictController(db *gorm.DB, validate *validator.Validate) controllers10.CompControllers {
	compRepositories := repositories10.NewComponentRepository()
	compServices := services10.NewComponentServices(compRepositories, db, validate)
	compControllers := controllers10.NewCompController(compServices)
	return compControllers
}

func InitializeAnalyticController(db *gorm.DB, validate *validator.Validate) controllers11.CompControllers {
	compRepositories := repositories11.NewComponentRepository()
	compServices := services11.NewComponentServices(compRepositories, db, validate)
	compControllers := controllers11.NewCompController(compServices)
	return compControllers
}

// injector.go:

var userFeatureSet = wire.NewSet(repositories.NewComponentRepository, services.NewComponentServices, controllers.NewCompController, repositories2.NewComponentRepository)

var storageFeatureSet = wire.NewSet(repositories3.NewComponentRepository, services2.NewComponentServices, controllers2.NewCompController)

var sellerFeatureSet = wire.NewSet(repositories4.NewComponentRepository, services3.NewComponentServices, controllers3.NewCompController, repositories.NewComponentRepository)

var productFeatureSet = wire.NewSet(repositories5.NewComponentRepository, services4.NewComponentServices, controllers4.NewCompController)

var orderFeatureSet = wire.NewSet(repositories6.NewComponentRepository, services5.NewComponentServices, controllers5.NewCompController, repositories7.NewComponentRepository, repositories5.NewComponentRepository)

var paymentFeatureSet = wire.NewSet(repositories7.NewComponentRepository, services6.NewComponentServices, controllers6.NewCompController)

var walletFeatureSet = wire.NewSet(repositories2.NewComponentRepository, services7.NewComponentServices, controllers7.NewCompController)

var articleFeatureSet = wire.NewSet(repositories8.NewComponentRepository, services8.NewComponentServices, controllers8.NewCompController)

var quizFeatureSet = wire.NewSet(repositories9.NewComponentRepository, services9.NewComponentServices, controllers9.NewCompController, repositories3.NewComponentRepository, services2.NewComponentServices)

var predictFeatureSet = wire.NewSet(repositories10.NewComponentRepository, services10.NewComponentServices, controllers10.NewCompController)

var analyticFeatureSet = wire.NewSet(repositories11.NewComponentRepository, services11.NewComponentServices, controllers11.NewCompController)
